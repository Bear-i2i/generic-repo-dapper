using System.ComponentModel;
using System.Data.SqlClient;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using Dapper;

namespace query.generator
{
    public class QueryTranslator : ExpressionVisitor 
    {
        private StringBuilder queryBuilder { get; set; }
        private readonly Dictionary<ExpressionType, string> logicalOperator;
        private Dictionary<string, object> parameters;

        public QueryTranslator(){
            queryBuilder = new StringBuilder();
            logicalOperator = new Dictionary<ExpressionType, string>(){
                [ExpressionType.AndAlso] = " AND ",
                [ExpressionType.Equal] = " = "
            };
            parameters = new Dictionary<string, object>();
        }

        public string ToString(Expression expression)
        {
            Visit(expression);
            return queryBuilder.ToString();
        }

        public override Expression? Visit(Expression? node)
        {
            return base.Visit(node);
        }

        protected override Expression VisitBinary(BinaryExpression node)
        {
            queryBuilder.Append("(");
            Visit(node.Left);
            queryBuilder.Append(logicalOperator[node.NodeType]);
            Visit(node.Right);
            queryBuilder.Append(")");
            return node;
        }

        protected override Expression VisitMember(MemberExpression node)
        {
            queryBuilder.Append($" {node.Member.Name} ");
            return node;
        }

        protected override Expression VisitConstant(ConstantExpression node)
        {
            queryBuilder.Append($" {node} ");
            return node;
        }
    }

    public class MemberExtractor : ExpressionVisitor 
    {
        private string currentMember { get; set; }
        
        public MemberExtractor()
        {
            currentMember = string.Empty;
        }

        public string ExtractMemberName(Expression expression)
        {
            Visit(expression);
            return currentMember;
        }

        [return: NotNullIfNotNull("node")]
        public override Expression? Visit(Expression? node)
        {
            return base.Visit(node);
        }
        protected override Expression VisitMember(MemberExpression node)
        {
            this.currentMember = node.Member.Name;
            return base.VisitMember(node);
        }
    }

    public class Person
    {
        public Person()
        {
            this.Name = string.Empty;
        }
        public int ID { get; set; }
        public string Name { get; set; }     
    }
    
    public interface IDapperEntity {
        string Schema { get; }
        string TableName { get; }
        Dictionary<string, string> PrimeryKeys { get; }
        Dictionary<string, string> ColumnMapping { get; }
        Dictionary<Type, Dictionary<string, string>> ForeingKeys { get; }
    }

    // Generated by code generation from SQL
    public class PersonDapperEntity : Person, IDapperEntity
    {
        private readonly string schema;
        private readonly string tableName;
        private readonly Dictionary<string, string> primaryKeys;
        private readonly Dictionary<string, string> columnMapping;
        private readonly Dictionary<Type, Dictionary<string, string>> foreingKeys;
        public PersonDapperEntity(){
            schema = "dbo";
            tableName = "Person";
            primaryKeys = new Dictionary<string, string>(){
                [nameof(ID)] = "ID"
            };

            columnMapping = new Dictionary<string, string>(){
                [nameof(ID)] = "ID",
                [nameof(Name)] = "Name" 
            };
            
            foreingKeys = new Dictionary<Type, Dictionary<string, string>>();
        }

        public string Schema => schema;

        public string TableName => tableName;

        public Dictionary<string, string> PrimeryKeys => primaryKeys;

        public Dictionary<string, string> ColumnMapping => columnMapping;

        public Dictionary<Type, Dictionary<string, string>> ForeingKeys => foreingKeys;
    }

    //Generate by code generation from SQL
    public class DapperDbContext
    {
        private readonly SqlConnection connection;
        private readonly Dictionary<Type, IDapperEntity> dapperEntities;

        public DapperDbContext()
        {
            this.PersonDapperEntity = new PersonDapperEntity();
            dapperEntities = new Dictionary<Type, IDapperEntity>(){
                [typeof(Person)] = PersonDapperEntity
            };

            connection = new SqlConnection("");
        }

        public PersonDapperEntity PersonDapperEntity { get; }
        public IDapperEntity Set<TEntity>()
        {
            return dapperEntities[typeof(TEntity)];
        }

        public int Execute(string query, Dictionary<string, object>? parameters = null)
        {
            Console.WriteLine(query);
            return 1;
        }

        public ICollection<TResult> Query<TResult>(string query, Dictionary<string, object>? parameters = null)
        {
            Console.WriteLine(query);
            return new List<TResult>();
        }
    }

    public class GenericRepository<TEntity> 
    {
        private readonly DapperDbContext dapperDbContext;
        public GenericRepository()
        {
            dapperDbContext = new DapperDbContext();
        }

        private Dictionary<string, object> GetParameters(TEntity entity)
        {
            var dapperEntity = dapperDbContext.Set<TEntity>();
            var parameters = new Dictionary<string, object>();
            foreach(PropertyDescriptor property in TypeDescriptor.GetProperties(entity!))
            {
                var value = property.GetValue(entity);
                if(dapperEntity.ColumnMapping.Keys.Contains(property.Name)){
                    parameters.Add($"@{property.Name}", property.GetValue(entity)!);
                }
            }
            return parameters;
        }

        public virtual int Insert(TEntity entity)
        {
            var dapperEntity = dapperDbContext.Set<TEntity>();
            var parameters = GetParameters(entity);
        
            string query = $"INSERT INTO [{ dapperEntity.Schema }].[{dapperEntity.TableName}]({ string.Join(",", dapperEntity.ColumnMapping.Values)}) VALUES({string.Join(",", dapperEntity.ColumnMapping.Keys.Select(a => $"@{a}"))})";
            return dapperDbContext.Execute(query, parameters);
        }

        public virtual int Update(TEntity entity, params Expression<Func<TEntity, object>>[] paramsToUpdate)
        {
            var dapperEntity = dapperDbContext.Set<TEntity>();
            var setMapping = new Dictionary<string, string>();
            var allParameters = GetParameters(entity);
            var parameters = new Dictionary<string, object>();

            foreach(var item in paramsToUpdate) 
            {
                var extractor = new MemberExtractor();
                var memberName = extractor.ExtractMemberName(item.Body);
                
                if(dapperEntity.ColumnMapping.Keys.Contains(memberName))
                {
                    setMapping.Add(dapperEntity.ColumnMapping[memberName], $"@{memberName}");
                }
            }

            foreach(var item in setMapping)
            {
                var itemKey = $"@{item.Key}";
                if(allParameters.Keys.Contains(itemKey))
                {
                    parameters.Add(itemKey, allParameters[itemKey]);
                }
            }

            foreach(var item in dapperEntity.PrimeryKeys)
            {
                var itemKey = $"@{item.Key}";
                if(allParameters.Keys.Contains(itemKey))
                {
                    parameters.Add(itemKey, allParameters[itemKey]);
                }
            }

            string query = $"UPDATE [{dapperEntity.Schema}].[{dapperEntity.TableName}] SET {string.Join(",", setMapping.Select(a => $"{a.Key} = {a.Value}"))} WHERE {string.Join(",", dapperEntity.PrimeryKeys.Select(a => $"{a.Value} = @{a.Key}"))}";
            return dapperDbContext.Execute(query, parameters);
        }

        public virtual int Delete(TEntity entity)
        {
            var dapperEntity = dapperDbContext.Set<TEntity>();
            var allParameters = GetParameters(entity);
            var parameters = new Dictionary<string, object>();

            foreach(var item in dapperEntity.PrimeryKeys)
            {
                var itemKey = $"@{item.Key}";
                if(allParameters.Keys.Contains(itemKey))
                {
                    parameters.Add(itemKey, allParameters[itemKey]);
                }
            }

            var query = $"DELETE FROM [{dapperEntity.Schema}].[{dapperEntity.TableName}] WHERE {string.Join(",", dapperEntity.PrimeryKeys.Select(a => $"{a.Value} = @{a.Key}"))}";
            return dapperDbContext.Execute(query, parameters);
        }

        public virtual TEntity? Find(object id)
        {
            var dapperEntity = dapperDbContext.Set<TEntity>();
            var parameters = new Dictionary<string, object>()
            {
                ["ID"] = id
            };
            
            var query = $"SELECT * FROM [{dapperEntity.Schema}].[{dapperEntity.TableName}] WHERE ID = @ID";
            return dapperDbContext.Query<TEntity>(query, parameters).FirstOrDefault();
        }

        public virtual TNew? Find<TNew>(Expression<Func<TEntity, TNew>> map, object id)
        {
            var dapperEntity = dapperDbContext.Set<TEntity>();

            var columnsToInclude = new List<string>();
            foreach(PropertyInfo property in typeof(TNew).GetProperties())
            {
                if(dapperEntity.ColumnMapping.Keys.Contains(property.Name))
                {
                    columnsToInclude.Add(property.Name);
                }
            }

            var parameters = new Dictionary<string, object>()
            {
                ["ID"] = id
            };
            
            var query = $"SELECT {string.Join(",", columnsToInclude)} FROM [{dapperEntity.Schema}].[{dapperEntity.TableName}] WHERE ID = @ID";
            return dapperDbContext.Query<TNew>(query, parameters).FirstOrDefault();
        }

        public virtual ICollection<TEntity> Filter(Expression<Func<TEntity, bool>> filter)
        {
            var dapperEntity = dapperDbContext.Set<TEntity>();
            var queryTranslator = new QueryTranslator();
            var whereFilter = queryTranslator.ToString(filter.Body);
            var query = $"SELECT * FROM [{ dapperEntity.Schema}].[{ dapperEntity.TableName}] WHERE { whereFilter }";

            return dapperDbContext.Query<TEntity>(query);
        }

        public virtual ICollection<TNew> Filter<TNew>(Expression<Func<TEntity, bool>> filter, Expression<Func<TEntity, TNew>> map){
            var dapperEntity = dapperDbContext.Set<TEntity>();
            
            var columnsToInclude = new List<string>();
            foreach(PropertyInfo property in typeof(TNew).GetProperties())
            {
                if(dapperEntity.ColumnMapping.Keys.Contains(property.Name))
                {
                    columnsToInclude.Add(property.Name);
                }
            }

            var queryTranslator = new QueryTranslator();
            var whereFilter = queryTranslator.ToString(filter.Body);
            var query = $"SELECT {string.Join(",", columnsToInclude)} FROM [{ dapperEntity.Schema}].[{ dapperEntity.TableName}] WHERE { whereFilter }";

            return dapperDbContext.Query<TNew>(query);
        }
    }

    public class Program{
        public static void Main(){
             var genericRepository = new GenericRepository<Person>();
             var newPerson = new Person(){
                ID = 1,
                Name = "New name"
             };
             genericRepository.Insert(newPerson);

             var updatePerson = new Person()
             {
                Name = "Updated name"
             };
             genericRepository.Update(updatePerson, a => a.Name);

             genericRepository.Delete(newPerson);

             genericRepository.Find(1);

             genericRepository.Find(a => new { a.Name }, 1);
             
             genericRepository.Filter(a => a.ID == 1 && a.Name == "Jhon");

             var mocks = genericRepository.Filter(a => a.ID == 5 , a => new {
                a.ID
             });
        } 
    }   
}